$darkColor: #000;
$transition: 1px 0.4s ease;
$boxShadow: 0 0 4px 4px #ccc;
$basicFont: 0.9rem;
$maxWidth: 1170px;
$btnPadding: 0.5rem 1rem;
$mainColor: #fff;

// String selector

body {
  color: $darkColor;
  div {
    transition: $transition;
    box-shadow: $boxShadow;
    font-size: $basicFont;
  }

  nav {
    max-width: $maxWidth;
  }

  section {
    max-width: $basicFont;
    button {
      padding: $btnPadding;
    }
  }
}

// Element Selector #{} | Data Types
$rgb: rgb(15, 0, 0);
$element: main-navigation;
$list: 1px 1px 3px 3px #ccc, 2px 2px 3px 4px #777;

header #{$element} {
  width: $maxWidth;
  color: $rgb;
  box-shadow: $list;
}

section ##{$element} {
  padding: $btnPadding;
}

section .#{$element} {
  padding: $btnPadding;
}

// Selector Completed

// INHERITANCE: 1) selector inheritance
$el: element;

#parent #{$el} {
  color: $darkColor;
  .child1 {
    color: $mainColor;
  }

  .child2 {
    font-size: $basicFont;
  }
}

// 2) property inheritance
// %shared {
//   background: $rgb;
//   font-size: $basicFont;
// }

.parent %shared .child {
  background: $rgb;
  font-size: $basicFont;
}
.myselector {
  @extend %shared;
  line-height: 1.2;
}

// Trick: whereever we have our %shared in our code, it will be replaced by .myselector
$list: elementOne, elementTwo, elementThree;

.sign,
video,
img #{$list} {
  @extend %shared;
}

// Mixins are parsed before our scss is converted into the CSS. So, we can pass scss into our mixin

$btnElement: button;
// @mixin btnProperties {
//   padding: $btnPadding;
//   background-color: $darkColor;
//   color: $mainColor;
// }

$btnWidth: 100px;
@mixin btnProperties($width) {
  padding: $btnPadding;
  background-color: $darkColor;
  color: $mainColor;
  width: $width;
}

header #{$btnElement} {
  border: none;
  outline: none;
  @include btnProperties($btnWidth);
}
